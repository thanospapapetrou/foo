prelude: funcky:prelude
 
# Type of numbers.
# type
# number = ...

# Infinity (∞).
# number
# infinity = ...

# Not a number (NaN).
# number
# NaN = ...

# Number π (3.14159265358979323846).
# number
# pi = ...

# Number e (2.7182818284590452354).
# number
# e = ...

# Check if a number is NaN.
# function number boolean
# isNaN value
# value the number to check
# return true if value is NaN, false otherwise
# isNaN = ...

# Get the integer part of a number.
# function number number
# integer value
# value the number whose integer part to get
# return the integer part of value
# integer = ...

# Add two numbers.
# function number (function number number)
# add term1 term2
# term1 the first term to add
# term2 the second term to add
# return the sum of term1 and term2 (term1 + term2)
# add = ...

# Subtract two numbers.
# function number (function number number)
# subtract minuend subtrahend
# minuend the minuend to subtract from
# subtrahend the subtrahend to subtract
# return the difference of minuend minus subtrahend (minuend - subtrahend)
# subtract = ...

# Multiply two numbers.
# function number (function number number)
# multiply factor1 factor2
# factor1 the first factor to multiply
# factor2 the second factor to multiply
# return the product of factor1 multiplied by factor2 (factor1 * factor2)
# multiply = ...

# Divide two numbers.
# function number (function number number)
# divide dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the quotient of dividend divided by divisor (dividend / divisor)
# divide = ...

# Negate a number.
# function number number
# minus value
# value the number to negate
# return the negation of value (-value)
# minus value = subtract 0 value
minus = subtract 0

# Invert a number.
# function number number
# invert value
# value the number to invert
# return the inverse of the value (1 / value)
# inverse value = divide 1 value
inverse = divide 1

# Calculate the integer quotient of two numbers.
# function number (function number number)
# quotient dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the integer quotient of dividend divided by divisor (integer (dividend / divisor))
# quotient dividend divisor = integer (divide dividend divisor)
quotient = prelude:compose (prelude:compose integer) divide

# Calculate the modulo of two numbers.
# function number (function number number)
# modulo dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the modulo of dividend divided by divisor (dividend - ((integer (dividend / divisor)) * divisor))
# modulo dividend divisor = subtract dividend (multiply (quotient dividend divisor) divisor)
modulo = prelude:compose prelude:duplicate (prelude:duplicate (prelude:flip (prelude:compose prelude:compose (prelude:compose prelude:compose (prelude:compose prelude:compose subtract))) (prelude:compose (prelude:compose multiply) quotient)))

# TODO
# fractional
# sqrt
# sin
# cos
# tan
# asin
# acos
# atan