# Type of types.
# type
# type = ...

# Type of numbers.
# type
# number = ...

# Type of booleans.
# type
# boolean = ...

# Number π, the ratio of the circumference of a circle to its diameter.
# number
# pi = ...

# Number e, the base of natural algorithms.
# number
# e = ...

# Infinity, ∞.
# number
# infinity = ...

# NaN, not a number.
# number
# NaN = ...

# Boolean true.
# boolean
# true = ...

# Boolean false.
# boolean
# false = ...

# Identity function.
# function <type> <type>
# identity argument
# argument the value to return
# return the given argument
# identity = ...

# Compose two functions.
# function (function <type1> <type2>) (function (function <type3> <type1>) (function <type3> <type2>))
# compose function1 function2 argument
# function1 the outer function to compose
# function2 the inner function to compose
# argument the argument to apply the composition to
# return the composition of the given functions applied to the given argument (function1 (function2 argument))
# compose = ...

# Flip the arguments of a function.
# function (function <type1> (function <type2> <type3>)) (function <type2> (function <type1> <type3>))
# flip function argument1 argument2
# function the function whose arguments to flip
# argument1 the second argument to pass to the function
# argument2 the first argument to pass to the function
# return a new function corresponding to applying the given function to the given arguments in reverse order (function argument2 argument1)
# flip = ... 

# Construct a function type.
# function type (function type type)
# function domain range
# domain the function domain type
# range the function range type
# return the function type corresponding to functions from the given domain type to the given range type
# function = ...  

# Get the type of an expression.
# function <type> type
# typeOf argument
# argument the argument whose type to get
# return the type of the given argument
# typeOf = ...

# Return then if condition is true or else if condition is false. 
# function boolean (function <type> (function <type> <type>))
# if condition then else
# condition the condition to check
# then the value to return if condition is true
# else the value to return if condition is false
# return then if condition is true or else if condition is false
# if = ...

# Add two numbers.
# function number (function number number)
# add term1 term2
# term1 the first term to add
# term2 the second term to add
# return the sum of term1 and term2 (term1 + term2)
# add = ...

# Subtract two numbers.
# function number (function number number)
# subtract minuend subtrahend
# minuend the minuend to subtract from
# subtrahend the subtrahend to subtract
# return the difference of minuend minus subtrahend (minuend - subtrahend)
# subtract = ...

# Multiply two numbers.
# function number (function number number)
# multiply factor1 factor2
# factor1 the first factor to multiply
# factor2 the second factor to multiply
# return the product of factor1 multiplied by factor2 (factor1 * factor2)
# multiply = ...

# Divide two numbers.
# function number (function number number)
# divide dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the quotient of dividend divided by divisor (dividend / divisor)
# divide = ...

# Negate a number.
# function number number
# minus number
# number the number to negate
# return the negation of number (-number)
minus = subtract 0

# Invert a number.
# function number number
# invert number
# number the number to invert
# return the inverse of the number (1 / number)
inverse = divide 1

# Logical negation.
# function boolean boolean
# not boolean
# boolean the boolean to negate
# return true if the given boolean is false or false if it is true
not = flip (flip if false) true

# Logical conjunction.
# function boolean (function boolean boolean)
# and boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if both operands are true or false if either of the two is false
# and = if x y false TODO

# Logical inclusive disjunction.
# function boolean (function boolean boolean)
# or boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if either of the two operands is true or false if both are false
or = flip if true

# Logical joint denial.
# function boolean (function boolean boolean)
# or boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return false if either of the two operands is true or true if both are false
nor = compose (compose not) (compose or identity)

# Logical exclusive disjunction.
# function boolean (function boolean boolean)
# xor boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if one of the two operands is true or false if they are both true or false
# xor = x or y and not (x and y) TODO 
