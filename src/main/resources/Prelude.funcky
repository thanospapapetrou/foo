# Type of types.
# type
# type = ...

# Type of numbers.
# type
# number = ...

# Number π, the ratio of the circumference of a circle to its diameter.
# number
# pi = ...

# Number e, the base of natural algorithms.
# number
# e = ...

# Infinity, ∞.
# number
# infinity = ...

# NaN, not a number.
# number
# NaN = ...

# Bottom function.
# bottom <type1> <type2>
# bottom argument
# return never return any value
# bottom = ...

# Identity function.
# function <type> <type>
# identity argument
# argument the value to return
# return the given argument
# identity = ...

# Compose two functions.
# function (function <type1> <type2>) (function (function <type3> <type1>) (function <type3> <type2>))
# compose function1 function2 argument
# function1 the outer function to compose
# function2 the inner function to compose
# argument the argument to apply the composition to
# return the composition of the given functions applied to the given argument (function1 (function2 argument))
# compose = ...

# Flip the arguments of a function.
# function (function <type1> (function <type2> <type3>)) (function <type2> (function <type1> <type3>))
# flip function argument1 argument2
# function the function whose arguments to flip
# argument1 the second argument to pass to the function
# argument2 the first argument to pass to the function
# return a new function corresponding to applying the given function to the given arguments in reverse order (function argument2 argument1)
# flip = ... 

# Duplicate the argument of a function.
# function (function <type1> (function <type1> <type2>)) <type1> <type2>
# duplicate function argument
# function the function whose argument to duplicate
# argument the argument to duplicate
# return a new function corresponding to applying the given function to the given argument and reapplying the resulting function to the same argument (function argument argument)
# duplicate = ...

# Get the type of an expression.
# function <type> type
# typeOf argument
# argument the argument whose type to get
# return the type of argument
# typeOf = ...

# Construct a function type.
# function type (function type type)
# function domain range
# domain the function domain type
# range the function range type
# return the function type corresponding to functions from the given domain type to the given range type
# function = ...  

# Check if a number is NaN.
# function number boolean
# isNaN value
# value the number to check
# return true if value is NaN, false otherwise
# isNaN = ...

# Get the integer part of a number.
# function number number
# integer value
# value the number whose integer part to get
# return the integer part of value
# integer = ...

# Add two numbers.
# function number (function number number)
# add term1 term2
# term1 the first term to add
# term2 the second term to add
# return the sum of term1 and term2 (term1 + term2)
# add = ...

# Subtract two numbers.
# function number (function number number)
# subtract minuend subtrahend
# minuend the minuend to subtract from
# subtrahend the subtrahend to subtract
# return the difference of minuend minus subtrahend (minuend - subtrahend)
# subtract = ...

# Multiply two numbers.
# function number (function number number)
# multiply factor1 factor2
# factor1 the first factor to multiply
# factor2 the second factor to multiply
# return the product of factor1 multiplied by factor2 (factor1 * factor2)
# multiply = ...

# Divide two numbers.
# function number (function number number)
# divide dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the quotient of dividend divided by divisor (dividend / divisor)
# divide = ...

# Negate a number.
# function number number
# minus value
# value the number to negate
# return the negation of value (-value)
# minus value = subtract 0 value
minus = subtract 0

# Invert a number.
# function number number
# invert value
# value the number to invert
# return the inverse of the value (1 / value)
# inverse value = divide 1 value
inverse = divide 1

# Calculate the integer quotient of two numbers.
# function number (function number number)
# quotient dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the integer quotient of dividend divided by divisor (integer (dividend / divisor))
# quotient dividend divisor = integer (divide dividend divisor)
quotient = compose (compose integer) divide

# Calculate the modulo of two numbers.
# function number (function number number)
# modulo dividend divisor
# dividend the dividend to divide
# divisor the divisor to divide by
# return the modulo of dividend divided by divisor (dividend - ((integer (dividend / divisor)) * divisor))
# modulo dividend divisor = subtract dividend (multiply (quotient dividend divisor) divisor)
modulo = compose duplicate (duplicate (flip (compose compose (compose compose (compose compose subtract))) (compose (compose multiply) quotient)))
