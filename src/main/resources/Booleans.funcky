prelude: funcky:prelude

# Type of booleans.
# prelude:type
# boolean = ...

# Boolean true.
# boolean
# true = ...

# Boolean false.
# boolean
# false = ...

# Equality operator.
# prelude:function $type (prelude:function $type boolean)
# equal value1 value2
# value1 the first operand
# value2 the second operand
# return true if value1 and value2 are equal, false otherwise
# equal = ...

# Type equivalence operator.
# prelude:function prelude:type (prelude:function prelude:type boolean)
# equivalent type1 type2
# type1 the first operand
# type2 the second operand
# return true if type1 and type2 are equivalent, false otherwise
# equivalent = ...

# Ternary operator. 
# prelude:function boolean (prelude:function $type (prelude:function $type $type))
# if condition then else
# condition the condition to check
# then the value to return if condition is true
# else the value to return if condition is false
# return then if condition is true or else if condition is false
# if = ...

# Logical negation.
# prelude:function boolean boolean
# not value
# value the boolean to negate
# return true if value is false or false if it is true
# not value = if value false true
not = prelude:flip (prelude:flip if false) true

# Logical conjunction.
# prelude:function boolean (prelude:function boolean boolean)
# and boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if both operands are true or false if either of them is false
# and = if boolean1 (if boolean2 true false) false
and = ((prelude:flip ((prelude:compose prelude:flip) ((prelude:flip ((prelude:compose prelude:compose) if)) ((prelude:flip ((prelude:flip if) true)) false)))) false)

# Logical alternative denial.
# prelude:function boolean (prelude:function boolean boolean)
# nand boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if either of the two operands is false or false if both of them are true
# nand boolean1 boolean2 = not (and boolean2 boolean2)
nand = prelude:compose (prelude:compose not) (prelude:compose and prelude:identity)

# Logical inclusive disjunction.
# prelude:function boolean (prelude:function boolean boolean)
# or boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if either of the two operands is true or false if both of them are false
# or boolean1 boolean2 = if boolean1 true boolean2
or = prelude:flip if true

# Logical joint denial.
# prelude:function boolean (prelude:function boolean boolean)
# or boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if both operands are false or false if either of them is true
# nor boolean1 boolean2 = not (or boolean1 boolean2)
nor = prelude:compose (prelude:compose not) (prelude:compose or prelude:identity)

# Logical exclusive disjunction.
# prelude:function boolean (prelude:function boolean boolean)
# xor boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if the two operands have different value or false if they have the same
# xor boolean1 boolean2 = if boolean1 (not boolean2) boolean2
xor = ((prelude:compose prelude:duplicate) ((prelude:flip ((prelude:compose prelude:compose) if)) not))

# Logical equality.
# prelude:function boolean (prelude:function boolean boolean)
# xnor boolean1 boolean2
# boolean1 the first operand
# boolean2 the second operand
# return true if the two operands have the same value or false if they have different
# xnor boolean1 boolean2 = not (xor boolean1 boolean2)
xnor = prelude:compose (prelude:compose not) (prelude:compose xor prelude:identity) 
